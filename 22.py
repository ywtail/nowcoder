# coding:utf-8
# 身体训练
from __future__ import division

n, v, u = map(float, raw_input().split())
n = int(n)
c = map(float, raw_input().split())
d = map(float, raw_input().split())

t = 0
for i in range(n):
    for j in range(n):
        t += u / (c[i] - j * d[i] - v)
print '%.3f' % t

'''
题目：
美团外卖的配送员用变速跑的方式进行身体训练。
他们训练的方式是：n个人排成一列跑步，前后两人之间相隔 u 米，每个人正常速度均为 v 米/秒。
当某个配送员排在最后的时候，他需要以当时自己的最高速度往前跑，直到超过排头的人 u 米，然后降回到原始速度 v 米/秒。
每个人最初的最高速度为c[i] 米/秒，每轮衰减d[i] 米/秒，也就是说，如果i是第j个跑的，那么他的速度就是c[i]-(j-1)*d[i] 米/秒。
n个人初始以随机的顺序排列，每种顺序的概率完全相等，跑完一轮（每个人都追到排头一次，序列恢复原样）的期望需要的时间是多少？

输入描述:
第一行整数n（<=1000）, 实数v(<=100) , 实数u(<=10)
第二行n个实数每个人的速度c[i](<=50000)
第三行n个实数值每个人衰减量d[i](<=10)
输入数据保证每个人的速度不会衰减到<=v

输出描述:
答案保留3位小数。

输入例子:
10 37.618 0.422
72.865 126.767 202.680 106.102 99.516 134.418 167.952 173.646 120.210 136.571
2.941 3.664 7.363 4.161 0.246 8.046 5.521 7.473 7.178 5.649

输出例子:
0.815

分析：
设时间为 t，配送员当前速度为 vv，那么有 (vv-v)*t = n*u
所以时间 t= n*u/(vv-v)，而vv=c[i]-j*d[i]
要求期望的时间，可以求每个配送员第1个跑、第2个跑、...、第n个跑所需的时间相加，再/n
'''