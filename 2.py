# -*- coding:utf-8 -*-
# 棋子翻转

class Flip:
    def flipChess(self, A, f):
        for (a, b) in f:
            if a == 1:
                A[a][b - 1] = (A[a][b - 1] + 1) % 2
            elif a == 4:
                A[a - 2][b - 1] = (A[a - 2][b - 1] + 1) % 2
            else:
                A[a][b - 1] = (A[a][b - 1] + 1) % 2
                A[a - 2][b - 1] = (A[a - 2][b - 1] + 1) % 2
            if b == 1:
                A[a - 1][b] = (A[a - 1][b] + 1) % 2
            elif b == 4:
                A[a - 1][b - 2] = (A[a - 1][b - 2] + 1) % 2
            else:
                A[a - 1][b] = (A[a - 1][b] + 1) % 2
                A[a - 1][b - 2] = (A[a - 1][b - 2] + 1) % 2
        return A

    def flipChess1(self, A, f):
        for (a, b) in f:
            if a < 4:
                A[a][b - 1] = (A[a][b - 1] + 1) % 2
            if a > 1:
                A[a - 2][b - 1] = (A[a - 2][b - 1] + 1) % 2
            if b < 4:
                A[a - 1][b] = (A[a - 1][b] + 1) % 2
            if b > 1:
                A[a - 1][b - 2] = (A[a - 1][b - 2] + 1) % 2
        return A

flip = Flip()
print flip.flipChess([[0,0,1,1],[1,0,1,0],[0,1,1,0],[0,0,1,0]],[[2,2],[3,3],[4,4]])
print flip.flipChess1([[0,0,1,1],[1,0,1,0],[0,1,1,0],[0,0,1,0]],[[2,2],[3,3],[4,4]])

'''
# 棋子翻转

[题目链接](https://www.nowcoder.com/practice/0b5ab6cc51804dd59f9988ad70d8c4a0?tpId=49&tqId=29282&tPage=1&rp=1&ru=/ta/2016test&qru=/ta/2016test/question-ranking)

**题目描述**

在4x4的棋盘上摆满了黑白棋子，黑白两色的位置和数目随机其中左上角坐标为(1,1),右下角坐标为(4,4),现在依次有一些翻转操作，要对一些给定支点坐标为中心的上下左右四个棋子的颜色进行翻转，请计算出翻转后的棋盘颜色。

给定两个数组**A**和**f**,分别为初始棋盘和翻转位置。其中翻转位置共有3个。请返回翻转后的棋盘。

**测试样例：**

> [[0,0,1,1],[1,0,1,0],[0,1,1,0],[0,0,1,0]],[[2,2],[3,3],[4,4]]
> 返回：[[0,1,1,1],[0,0,1,0],[0,1,1,0],[0,0,1,0]]

- flipChess(self, A, f):
思路很简单，但是写起来费事，非常容易出现幼稚的细节错误。
运行时间：40ms
占用内存：3156k

- flipChess1(self, A, f):
代码太长了，改短一点。
运行时间：30ms
占用内存：3160k
'''
